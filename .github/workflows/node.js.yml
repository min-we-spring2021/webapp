# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build & Deploy webapp

env:
  ARTIFACT_NAME: csye6225-webapp-${{ github.sha }}.zip
  CODEDEPLOY_APPLICATION_NAME: csye6225-webapp
  CODEDEPLOY_APPLICATION_NAME_GROUP_NAME: csye6225-webapp-deployment
  AWS_REGION: us-east-1
on:
  pull_request:
    branches: [main]

  workflow_dispatch:

jobs:
  ci_cd:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x, 15.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2

      - name: build deployment Artifact
        run: |
          mkdir codedeploy_artifact
          zip -r ${{ env.ARTIFACT_NAME }} codedeploy/*.sh appspec.yml
          pwd
          ls -al 
          mv ${{ env.ARTIFACT_NAME }} codedeploy_artifact
          pwd
          ls -al 
          cd .. 
          pwd 
          ls -al

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Copy files to S3
        run: |
          aws s3 sync ./codedeploy_artifact s3://${{ secrets.S3_CODEDEPLOY_BUCKET }}

      - name: codedeploy api call
        run: |
          output=$(aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODEDEPLOY_APPLICATION_NAME_GROUP_NAME }} \
            --description "csye6225 - codedeploy" \
            --s3-location bucket=${{ secrets.S3_CODEDEPLOY_BUCKET }},key=${{ env.ARTIFACT_NAME }},bundleType=zip \
            --region ${{ env.AWS_REGION }} \
            --output json)

            echo $output

            dId=$(echo $output | jq -r '.deploymentId')

            aws deploy wait deployment-successful --deployment-id $dId
            }
